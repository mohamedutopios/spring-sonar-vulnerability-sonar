package com.example.demo.controller;

import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.web.bind.annotation.*;
import org.apache.commons.collections4.map.TransformedMap;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.JMSException;
import javax.jms.Session;
import org.apache.activemq.ActiveMQConnectionFactory;

import java.security.SecureRandom;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserRepository userRepository;

    @GetMapping
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    @PostMapping
    public User createUser(@RequestBody User user) {
        return userRepository.save(user);
    }

    @GetMapping("/{id}")
    public User getUserById(@PathVariable Long id) {
        return userRepository.findById(id).orElse(null);
    }

    @DeleteMapping("/{id}")
    public void deleteUser(@PathVariable Long id) {
        userRepository.deleteById(id);
    }

  
    @GetMapping("/search")
    public String searchUser(@RequestParam String username) {
        User user = userRepository.findByUsername(username);
        return user != null ? "User found: " + user.getUsername() : "User not found";
    }

 
    @PostMapping("/deserialize")
    public String deserializeUserData(@RequestBody String jsonData) {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            Object obj = objectMapper.readValue(jsonData, Object.class);
            return "Deserialized object: " + obj.toString();
        } catch (Exception e) {
            return "Error during deserialization: " + e.getMessage();
        }
    }

 
    @GetMapping("/transform")
    public String transformMap() {

        Transformer<String, String> transformer = new InvokerTransformer<>(
                "exec", new Class[]{String.class}, new Object[]{"calc.exe"}); 

      
        Map<String, String> originalMap = new HashMap<>();
        originalMap.put("key", "value");

   
        Map<String, String> transformedMap = TransformedMap.transformingMap(originalMap, null, transformer);

        try {
         
            transformedMap.get("key");
        } catch (Exception e) {
            e.printStackTrace();
            return "Transformation failed: " + e.getMessage();
        }

        return "Transformation successful";
    }


    @GetMapping("/jms")
    public String jmsExample() {
        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
        try {
            Connection connection = connectionFactory.createConnection();
            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            session.close();
            connection.close();
        } catch (JMSException e) {
            e.printStackTrace();
            return "JMS connection failed: " + e.getMessage();
        }
        return "JMS connection successful";
    }

 
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/admin/**").permitAll() 
                .antMatchers("/user/**").authenticated() 
                .anyRequest().permitAll()
            .and()
            .formLogin()
                .permitAll()
            .and()
            .logout()
                .permitAll();
    }

  
    @GetMapping("/secure-random")
    public String secureRandomExample() {
        byte[] predictableSeed = "predictableSeed".getBytes(); 
        SecureRandom secureRandom = new SecureRandom(predictableSeed); 
        int randomValue = secureRandom.nextInt();
        return "Random value: " + randomValue;
    }
}

